"""Initial migration with base tables

Revision ID: a351e3a9aab9
Revises: 
Create Date: 2025-04-13 15:18:17.864400

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a351e3a9aab9'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('establishment_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_establishment_types_name'), 'establishment_types', ['name'], unique=True)
    op.create_table('field_mappings',
    sa.Column('field_code', sa.Text(), nullable=False),
    sa.Column('chinese_name', sa.Text(), nullable=False),
    sa.Column('category', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('data_type', sa.Text(), nullable=True),
    sa.Column('display_order', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('field_code')
    )
    op.create_index(op.f('ix_field_mappings_category'), 'field_mappings', ['category'], unique=False)
    op.create_table('units',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_units_name'), 'units', ['name'], unique=True)
    op.create_table('departments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('unit_id', sa.Integer(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['unit_id'], ['units.id'], onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('unit_id', 'name', name='uq_department_unit_name')
    )
    op.create_index(op.f('ix_departments_unit_id'), 'departments', ['unit_id'], unique=False)
    op.create_table('employees',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('employee_unique_id', sa.Text(), nullable=True),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('id_card_number', sa.Text(), nullable=True),
    sa.Column('bank_account_number', sa.Text(), nullable=True),
    sa.Column('bank_name', sa.Text(), nullable=True),
    sa.Column('hire_date', sa.Date(), nullable=True),
    sa.Column('employment_status', sa.Text(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('department_id', sa.Integer(), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['unit_id'], ['units.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_employees_department_id'), 'employees', ['department_id'], unique=False)
    op.create_index(op.f('ix_employees_employee_unique_id'), 'employees', ['employee_unique_id'], unique=True)
    op.create_index(op.f('ix_employees_employment_status'), 'employees', ['employment_status'], unique=False)
    op.create_index(op.f('ix_employees_id_card_number'), 'employees', ['id_card_number'], unique=True)
    op.create_index(op.f('ix_employees_unit_id'), 'employees', ['unit_id'], unique=False)
    op.create_table('salary_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('employee_id', sa.Integer(), nullable=False),
    sa.Column('establishment_type_id', sa.Integer(), nullable=False),
    sa.Column('pay_period_start_date', sa.Date(), nullable=False),
    sa.Column('pay_period_end_date', sa.Date(), nullable=False),
    sa.Column('job_attributes', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('salary_components', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('personal_deductions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('company_contributions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('other_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['establishment_type_id'], ['establishment_types.id'], onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_salary_records_employee_id'), 'salary_records', ['employee_id'], unique=False)
    op.create_index(op.f('ix_salary_records_establishment_type_id'), 'salary_records', ['establishment_type_id'], unique=False)
    op.create_index(op.f('ix_salary_records_pay_period_end_date'), 'salary_records', ['pay_period_end_date'], unique=False)
    op.create_index(op.f('ix_salary_records_pay_period_start_date'), 'salary_records', ['pay_period_start_date'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_salary_records_pay_period_start_date'), table_name='salary_records')
    op.drop_index(op.f('ix_salary_records_pay_period_end_date'), table_name='salary_records')
    op.drop_index(op.f('ix_salary_records_establishment_type_id'), table_name='salary_records')
    op.drop_index(op.f('ix_salary_records_employee_id'), table_name='salary_records')
    op.drop_table('salary_records')
    
    # --- Start: Add dropping dependent views before dropping employees table ---
    print("Dropping dbt views dependent on employees table...")
    op.execute('DROP VIEW IF EXISTS public.view_level1_calculations CASCADE;')
    op.execute('DROP VIEW IF EXISTS public.view_base_data CASCADE;')
    op.execute('DROP VIEW IF EXISTS public.stg_employees CASCADE;') # Assuming public schema
    print("Dependent dbt views dropped.")
    # --- End: Add dropping dependent views ---
    
    op.drop_index(op.f('ix_employees_unit_id'), table_name='employees')
    op.drop_index(op.f('ix_employees_id_card_number'), table_name='employees')
    op.drop_index(op.f('ix_employees_employment_status'), table_name='employees')
    op.drop_index(op.f('ix_employees_employee_unique_id'), table_name='employees')
    op.drop_index(op.f('ix_employees_department_id'), table_name='employees')
    op.drop_table('employees')
    op.drop_index(op.f('ix_departments_unit_id'), table_name='departments')
    op.drop_table('departments')
    op.drop_index(op.f('ix_units_name'), table_name='units')
    op.drop_table('units')
    op.drop_index(op.f('ix_field_mappings_category'), table_name='field_mappings')
    op.drop_table('field_mappings')
    op.drop_index(op.f('ix_establishment_types_name'), table_name='establishment_types')
    op.drop_table('establishment_types')
    # ### end Alembic commands ###
