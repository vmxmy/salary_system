version: '3.8'

services:
  db:
    image: postgres:14-alpine # Use a specific version
    container_name: salary_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-salary_system}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password} # Used by init, backend, and backup
    ports:
      # Map host port from .env (default 5432) to container port 5432
      - "${DB_HOST_PORT:-5432}:5432" 
    networks:
      - salary-network
    restart: unless-stopped

  # New service for automated backups
  db-backup:
    image: postgres:14-alpine # Re-use postgres image for pg_dump tool
    container_name: salary_db_backup
    environment:
      PGHOST: db # Target database service name
      PGDATABASE: ${POSTGRES_DB:-salary_system} # Target database name
      PGUSER: ${POSTGRES_USER:-user} # Database user
      PGPASSWORD: ${POSTGRES_PASSWORD:-password} # Database password (read from .env)
      BACKUP_INTERVAL: ${DB_BACKUP_INTERVAL:-86400} # Backup interval in seconds (default 24 hours)
    volumes:
      - db_backups:/backups # Mount the backup volume
    networks:
      - salary-network
    depends_on:
      - db # Wait for the database service to start
    # Command to run backups periodically. Uses PGPASSWORD env var.
    # Creates a timestamped backup file.
    command: >
      sh -c '
        echo "Starting backup loop with interval $BACKUP_INTERVAL seconds...";
        while true; do 
          echo "Creating backup at $(date +"%Y-%m-%d_%H-%M-%S")"; 
          pg_dump -h $$PGHOST -U $$PGUSER $$PGDATABASE > /backups/backup_$(date +%Y%m%d_%H%M%S).sql; 
          echo "Backup finished at $(date)"; 
          echo "Next backup in $BACKUP_INTERVAL seconds...";
          sleep $$BACKUP_INTERVAL; 
        done
      '
    restart: unless-stopped

  # New service for initialization
  backend-init:
    container_name: salary_backend_init
    build:
      # Context is the project root directory relative to this compose file
      context: ..
      # Dockerfile path relative to the new context
      dockerfile: ./docker/backend/Dockerfile
    command: python /app/scripts/init_app.py # Command to run the init script
    environment:
      # Inherit necessary env vars for DB connection and admin creation
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-salary_system}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin} # Add Admin User env vars
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@example.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-changeme}
      SECRET_KEY: ${SECRET_KEY:-you_should_change_this_in_env} # Needed if user creation logic uses it
    depends_on:
      - db # Wait for DB container to start
    networks:
      - salary-network
    restart: 'no' # Only run once

  backend:
    container_name: salary_backend
    build:
      # Context is the project root directory relative to this compose file
      context: ..
      # Dockerfile path relative to the new context
      dockerfile: ./docker/backend/Dockerfile
    volumes:
      # Optional: Mount code for development (remove for production)
      # - ../webapp:/app 
      - static_volume:/app/static # If backend serves/collects static files
    ports:
      # Map host port from .env (default 8000) to container port 8000
      - "${BACKEND_HOST_PORT:-8000}:8000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-salary_system}
      SECRET_KEY: ${SECRET_KEY:-you_should_change_this_in_env} # Add other backend env vars
      # Example: specify allowed hosts if needed by FastAPI/Uvicorn
      # ALLOWED_HOSTS: "localhost,127.0.0.1,[::1]"
    depends_on:
      # db: # Basic dependency - DB container started
      #  condition: service_started 
      # Depend on the init service completing successfully
      backend-init:
        condition: service_completed_successfully
    networks:
      - salary-network
    restart: unless-stopped

  frontend:
    container_name: salary_frontend
    build:
      # Context is the project root directory relative to this compose file
      context: ..
      # Dockerfile path relative to the new context
      dockerfile: ./docker/frontend/Dockerfile
    volumes:
      # Mount the nginx config from the docker/frontend directory (path relative to compose file)
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf 
    ports:
      # Map host port from .env (default 80) to container port 80
      - "${FRONTEND_HOST_PORT:-80}:80"
      # - "${FRONTEND_HOST_PORT_HTTPS:-443}:443" # If using HTTPS
    depends_on:
      - backend # Ensure backend is available for API proxy
    networks:
      - salary-network
    restart: unless-stopped

#  jimu:
#    container_name: salary_jimu
#    # Option A: Use official image
#    # image: some/jimu-reports-image:latest
#    # Option B: Build custom image
#    # build:
#    #   # Context is the directory containing the Dockerfile relative to compose file
#    #   context: ./jimu
#    #   # Dockerfile directive removed, Docker finds Dockerfile in context
#    ports:
#      # Map host port from .env (default 8080) to container port 8080
#      - "${JIMU_HOST_PORT:-8080}:8080"
#    volumes:
#      - jimu_data:/path/to/jimu/persistent/data # Define volume if Jimu needs persistent storage
#    depends_on:
#      - db # Jimu might need the database
#    networks:
#      - salary-network
#    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  jimu_data: # Define if needed for Jimu
    driver: local
  static_volume: # Define if backend needs persistent static files
    driver: local
  # Define the new volume for backups
  db_backups: 
    driver: local

networks:
  salary-network:
    driver: bridge 